<?php

require_once '../testclass/cartUpdatingUnitTest.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2021-06-24 at 14:37:01.
 */
class cartUpdatingUnitTestTest extends PHPUnit_Framework_TestCase {

    /**
     * @var cartUpdatingUnitTest
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new cartUpdatingUnitTest;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    //test if session cn able to detect duplicated isbn key (primary key)
    //case 1: completely all element details same
    public function testIsDuplicatedSessionBookTrue() {
        $addCart = array("isbn" => "9791296965391", "amt" => 20, "title" => "Book of Life", "pic" => "https://unsplash.com/photos/DCzpr09cTXY", "price" => 294);
        $tempISBN = $addCart["isbn"];
        $duplicated = $this->object->checkDuplicatedSessionBook($tempISBN);
        $this->assertTrue($duplicated);
    }

    //case 2: isbn same but others element different
    public function testIsDuplicatedSessionBookTrue2() {
        $addCart = array("isbn" => "9791296965391", "amt" => 655232, "title" => "HappyFeet", "pic" => "https://tresplash.com/DCzpr06473", "price" => 3443);
        $tempISBN = $addCart["isbn"];
        $duplicated = $this->object->checkDuplicatedSessionBook($tempISBN);
        $this->assertTrue($duplicated);
    }

    //case 3: only isbn different others element remain
    public function testIsDuplicatedSessionBookFalse() {
        $addCart = array("isbn" => "82763136no237187", "amt" => 20, "title" => "Book of Life", "pic" => "https://unsplash.com/photos/DCzpr09cTXY", "price" => 294);
        $tempISBN = $addCart["isbn"];
        $duplicated = $this->object->checkDuplicatedSessionBook($tempISBN);
        $this->assertFalse($duplicated);
    }

    //case 4: all element differnet
    public function testIsDuplicatedSessionBookFalse2() {
        $addCart = array("isbn" => "82763qwe12no237187", "amt" => 655232, "title" => "HappyFeet", "pic" => "https://tresplash.com/DCzpr06473", "price" => 3443);
        $tempISBN = $addCart["isbn"];
        $duplicated = $this->object->checkDuplicatedSessionBook($tempISBN);
        $this->assertFalse($duplicated);
    }

    //check if amt can be increase after found duplicated (in test class, init amt in session is 20)
    public function testCheckUpdatedSessionAmtTrue() {
        $addCart = array("isbn" => "9791296965391", "amt" => 1, "title" => "Book of Life", "pic" => "https://unsplash.com/photos/DCzpr09cTXY", "price" => 294);
        $tempISBN = $addCart["isbn"];
        $addedAmt = $addCart["amt"];
        $newAmt = $this->object->checkUpdatedSessionAmt($tempISBN);
        $this->assertSame(21, $newAmt); //only +1 in home page" add to cart button
    }

    //check if amt wont increase after found not duplicated (in test class, init amt in session is 20)
    public function testCheckUpdatedSessionAmtFalse() {
        $addCart = array("isbn" => "sajdgahdg732", "amt" => 1, "title" => "Book of Life", "pic" => "https://unsplash.com/photos/DCzpr09cTXY", "price" => 294);
        $tempISBN = $addCart["isbn"];
        $addedAmt = $addCart["amt"];
        $newAmt = $this->object->checkUpdatedSessionAmt($tempISBN);
        $this->assertNotSame(21, $newAmt);
        $this->assertSame(20, $newAmt); //remain same if isbn not equal
    }

    //check if price can be updated correctly after found duplicated (in test class, init price in session is 20*5==100)
    public function testCheckUpdatedSessionPriceTrue() {
        $addCart = array("isbn" => "9791296965391", "amt" => 1, "title" => "Book of Life", "pic" => "https://unsplash.com/photos/DCzpr09cTXY", "price" => 5);
        $tempISBN = $addCart["isbn"];
        $tempPrice = $addCart["price"];
        //$addedAmt = $addCart["amt"];
        $newPrice = $this->object->checkUpdatedSessionPrice($tempISBN, $tempPrice);
        $this->assertSame(105, $newPrice); //have to +5 from the init price since is only adding 1 duplicated book
    }

    //check if price can be updated correctly after found duplicated (in test class, init price in session is 20*5==100)
    public function testCheckUpdatedSessionPriceFalse() {
        $addCart = array("isbn" => "iyr7264jkhkdh", "amt" => 1, "title" => "Book of Life", "pic" => "https://unsplash.com/photos/DCzpr09cTXY", "price" => 5);
        $tempISBN = $addCart["isbn"];
        $tempPrice = $addCart["price"];
        //$addedAmt = $addCart["amt"];
        $newPrice = $this->object->checkUpdatedSessionPrice($tempISBN, $tempPrice);
        $this->assertNotSame(105, $newPrice);
        $this->assertSame(100, $newPrice); //remain unchged if isbn not equal
    }

}


